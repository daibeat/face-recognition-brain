{"ast":null,"code":"var _jsxFileName = \"/Users/davidchazarrabru/Desktop/web projects/face-recognition-brain-master/src/App.js\";\nimport React, { Component } from \"react\";\nimport Particles from \"react-particles-js\";\nimport Clarifai from \"clarifai\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Signin from \"./components/Signin/Signin\";\nimport Register from \"./components/Register/Register\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport \"./App.css\"; //You must add your own API key here from Clarifai.\n\nconst app = new Clarifai.App({\n  apiKey: \"cf8a279f1b3f42c1ad6652eea813bb4b\"\n});\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n};\nconst initialState = {\n  input: \"\",\n  imageUrl: \"\",\n  box: {},\n  route: \"signin\",\n  isSignedIn: false,\n  user: {\n    id: \"\",\n    name: \"\",\n    email: \"\",\n    entries: 0,\n    joined: \"\"\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          entries: data.entries,\n          joined: data.joined\n        }\n      });\n    };\n\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById(\"inputimage\");\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n\n    this.displayFaceBox = box => {\n      this.setState({\n        box: box\n      });\n    };\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict( // HEADS UP! Sometimes the Clarifai Models can be down or not working as they are constantly getting updated.\n      // A good way to check if the model you are using is up, is to check them on the clarifai website. For example,\n      // for the Face Detect Mode: https://www.clarifai.com/models/face-detection\n      // If that isn't working, then that means you will have to wait until their servers are back up. Another solution\n      // is to use a different version of their model that works like: `c0c0ac362b03416da06ab3fa36fb58e3`\n      // so you would change from:\n      // .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n      // to:\n      // .predict('c0c0ac362b03416da06ab3fa36fb58e3', this.state.input)\n      Clarifai.FACE_DETECT_MODEL, this.state.input).then(response => {\n        console.log(\"hi\", response);\n\n        if (response) {\n          fetch(\"http://localhost:3000/image\", {\n            method: \"put\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            }));\n          });\n        }\n\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      }).catch(err => console.log(err));\n    };\n\n    this.onRouteChange = route => {\n      if (route === \"signout\") {\n        this.setState(initialState);\n      } else if (route === \"home\") {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n\n      this.setState({\n        route: route\n      });\n    };\n\n    this.state = initialState;\n  }\n\n  render() {\n    const {\n      isSignedIn,\n      imageUrl,\n      route,\n      box\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\"\n    }, /*#__PURE__*/React.createElement(Particles, {\n      className: \"particles\",\n      params: particlesOptions\n    }), /*#__PURE__*/React.createElement(Navigation, {\n      isSignedIn: isSignedIn,\n      onRouteChange: this.onRouteChange\n    }), route === \"home\" ? /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Logo, null), /*#__PURE__*/React.createElement(Rank, {\n      name: this.state.user.name,\n      entries: this.state.user.entries\n    }), /*#__PURE__*/React.createElement(ImageLinkForm, {\n      onInputChange: this.onInputChange,\n      onButtonSubmit: this.onButtonSubmit\n    }), /*#__PURE__*/React.createElement(FaceRecognition, {\n      box: box,\n      imageUrl: imageUrl\n    })) : route === \"signin\" ? /*#__PURE__*/React.createElement(Signin, {\n      loadUser: this.loadUser,\n      onRouteChange: this.onRouteChange\n    }) : /*#__PURE__*/React.createElement(Register, {\n      loadUser: this.loadUser,\n      onRouteChange: this.onRouteChange\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/davidchazarrabru/Desktop/web projects/face-recognition-brain-master/src/App.js"],"names":["React","Component","Particles","Clarifai","FaceRecognition","Navigation","Signin","Register","Logo","ImageLinkForm","Rank","app","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","initialState","input","imageUrl","box","route","isSignedIn","user","id","name","email","entries","joined","constructor","loadUser","data","setState","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","onInputChange","event","target","onButtonSubmit","state","models","predict","FACE_DETECT_MODEL","then","response","console","log","fetch","method","headers","body","JSON","stringify","json","count","Object","assign","catch","err","onRouteChange","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Particles from \"react-particles-js\";\nimport Clarifai from \"clarifai\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Signin from \"./components/Signin/Signin\";\nimport Register from \"./components/Register/Register\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport \"./App.css\";\n\n//You must add your own API key here from Clarifai.\nconst app = new Clarifai.App({\n  apiKey: \"cf8a279f1b3f42c1ad6652eea813bb4b\",\n});\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 800,\n      },\n    },\n  },\n};\n\nconst initialState = {\n  input: \"\",\n  imageUrl: \"\",\n  box: {},\n  route: \"signin\",\n  isSignedIn: false,\n  user: {\n    id: \"\",\n    name: \"\",\n    email: \"\",\n    entries: 0,\n    joined: \"\",\n  },\n};\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initialState;\n  }\n\n  loadUser = (data) => {\n    this.setState({\n      user: {\n        id: data.id,\n        name: data.name,\n        email: data.email,\n        entries: data.entries,\n        joined: data.joined,\n      },\n    });\n  };\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace =\n      data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById(\"inputimage\");\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - clarifaiFace.right_col * width,\n      bottomRow: height - clarifaiFace.bottom_row * height,\n    };\n  };\n\n  displayFaceBox = (box) => {\n    this.setState({ box: box });\n  };\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value });\n  };\n\n  onButtonSubmit = () => {\n    this.setState({ imageUrl: this.state.input });\n    app.models\n      .predict(\n        // HEADS UP! Sometimes the Clarifai Models can be down or not working as they are constantly getting updated.\n        // A good way to check if the model you are using is up, is to check them on the clarifai website. For example,\n        // for the Face Detect Mode: https://www.clarifai.com/models/face-detection\n        // If that isn't working, then that means you will have to wait until their servers are back up. Another solution\n        // is to use a different version of their model that works like: `c0c0ac362b03416da06ab3fa36fb58e3`\n        // so you would change from:\n        // .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n        // to:\n        // .predict('c0c0ac362b03416da06ab3fa36fb58e3', this.state.input)\n        Clarifai.FACE_DETECT_MODEL,\n        this.state.input\n      )\n      .then((response) => {\n        console.log(\"hi\", response);\n        if (response) {\n          fetch(\"http://localhost:3000/image\", {\n            method: \"put\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              id: this.state.user.id,\n            }),\n          })\n            .then((response) => response.json())\n            .then((count) => {\n              this.setState(Object.assign(this.state.user, { entries: count }));\n            });\n        }\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  onRouteChange = (route) => {\n    if (route === \"signout\") {\n      this.setState(initialState);\n    } else if (route === \"home\") {\n      this.setState({ isSignedIn: true });\n    }\n    this.setState({ route: route });\n  };\n\n  render() {\n    const { isSignedIn, imageUrl, route, box } = this.state;\n    return (\n      <div className=\"App\">\n        <Particles className=\"particles\" params={particlesOptions} />\n        <Navigation\n          isSignedIn={isSignedIn}\n          onRouteChange={this.onRouteChange}\n        />\n        {route === \"home\" ? (\n          <div>\n            <Logo />\n            <Rank\n              name={this.state.user.name}\n              entries={this.state.user.entries}\n            />\n            <ImageLinkForm\n              onInputChange={this.onInputChange}\n              onButtonSubmit={this.onButtonSubmit}\n            />\n            <FaceRecognition box={box} imageUrl={imageUrl} />\n          </div>\n        ) : route === \"signin\" ? (\n          <Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange} />\n        ) : (\n          <Register\n            loadUser={this.loadUser}\n            onRouteChange={this.onRouteChange}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}